// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  chatSessions ChatSession[]
  writingTasks WritingTask[]
  imageTasks   ImageTask[]

  @@map("users")
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  sessionId Int
  role      String   // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())

  // 关联关系
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model WritingTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  prompt      String
  content     String?
  status      String   @default("pending") // "pending", "processing", "completed", "failed"
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("writing_tasks")
}

model ImageTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  prompt      String
  imageUrl    String?
  status      String   @default("pending") // "pending", "processing", "completed", "failed"
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("image_tasks")
}
